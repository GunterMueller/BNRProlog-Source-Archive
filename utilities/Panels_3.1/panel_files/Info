
Introduction to Panels:
-----------------------

Panels 3.x is a evolution of Panels 2.x, a user interface construction kit for Prolog 
applications.  It includes an interactive editor which permits the designer to create 
panels (i.e., windows) with a set of objects such as fields, buttons, and so on. These 
objects generate events (such as a 'click' on a button) that can be used by the Prolog 
application to 'animate' the panel interface.  The panel event handlers can access the 
current state of the panel, enabling them to read or write any of the information being 
displayed in the panel.

Panel definitions, normally created and modified by the interactive editor (although
alternative mechanisms, e.g., text editing, are possible), and saved in Prolog files. 
Panel event handlers, written by the designer, are usually included in the same file.

A basic set of object classes (field, button, and list) are provided as part of panels.
Each supported class has an interactive editor (which is also a panel) to permit
interactive modification of object properties, such as name, style, font specification, etc.
More generic properties of the panel (style, backgrounds, etc.) are modified in a 
similar using a panel editor (also a panel).

New object classes can be added by the application designer. These new object classes
optionally provide a name to appear in the editors pop-up menu to allow the user to 
create such objects and a set of 'methods' to draw the object, update its value, etc.
However it is not necessary to do anything special to drag or grow items, the
editor simply treats all objects as rectangular areas that it can manipulate. 


Internal design:
----------------

This section assumes some that you have used Panels, if not, load it and use Help to
lead you to examples and other documentation.


Every object is defined by a term of the form:

        Class(name(Name), place(Xl,Yt,Xr,Yb), Other_properties..)

    eg: button(name(ok),place(246,269,334,297),style(designate),label('OK'),state(off),
               font(0,12),icon(0),menu())
        field(name(colour),place(245,100,331,120),pre(''),selection(''),post(''),top(0),
              font(0,12),lock(off),lines(off),style(rectangle),
              menu(white,black,red,green,cyan,blue,magenta,yellow),
              exitset(enter,'\09'))


The Name is a Prolog term is used to label objects, while place(Xl,Yt,Xr,Yb) defines the 
rectangle that locates the object in the panel.  The name and place properties are usually
manipulated during an edit session, and not often changed later when the panel is used as
an interactive application interface.

The place property and the panel_item_hit class method is used to determine if a mouse event
is directed at this particular object, and the class and name are used as a reference for
the panel_event, and to allow read or write access to the object properties via panel_view. 

The rest of the properties are specific to the class.  The button object above has a 
'designate' style, a text label of 'OK', a state of 'off', a font id and size of 0,12 (no 
additional font style modifiers, e.g., italic), no associated icon (value of 0), and no menu.
On the other hand, the field object has a different set of properties specifying the field 
contents, a lock switch to disable user editing, etc.  An object's property values can be 
changed interactively, using the class editor, or via a programming interface (panel_view).

The list of items that make up a panel's content are generated by an edit session, and
recorded in the panel's text file. When this file is loaded the 'panel_definition'
clause is consulted and remembered in state space.  All subsequent object state changes
are also maintained by the panels system in state space.


File Structure:
---------------

The implementation for Panels consists of 8 program files and a number of auxiliary files
which are used for online help and examples.  The 8 program files, and their dependancies
on each other are listed below:

    'panels'        uses 'panels uif'
                    control file for panels development environment
    'panel view'    uses 'panel works'
                    support for panel_view, the predicate to access modify panel objects
    'panel uif'     uses 'panels','panel sys'
                    support of 'Panels' menu and online help
    'panel sys'     uses 'panel view','panel works'
                    support for panel_open,panel_create,panel_save,panel_close,panel_menu
    'panel editor'  uses 'panel view','panel sys','panel works'
                    support for dynamically editing panels
    'button_editor' button class editor
    'field_editor'  field class editor
    'list_editor'   list class editor
    'button_class'  implemenation of class button
    'field_class'   implemenation of class field
    'list_class'    implemenation of class list
    'panel works'   uses 'panel view'
                    provides default object behaviour, event handling, and a few utilities

The core of Panels consists of 'panel view', 'panel sys', and 'panel works'; this set
provides basic panel functionality.  Add 'button_class', 'list_class', and 'field_class' to 
get a set of system defined objects.  'panel editor' permits the editing of panels, while
the associated class editors implement interactive modifiaction of objects. Finally,
'panel uif' provides a Panels menu and online help/examples, and the control file
'panels' loads the files, adds its resource fork to the search list (for predefined
icons), and installs the menu. Note that whatever subset of files you choose, the
should be loaded into the same context using the technique employed by the $initialization
predicate in 'panels'. In addition, the files should be consulted in the order
listed above to ensure that clause ordering is preserved. Applications that use icons 
should ensure that they are available as resources when the application is launched; 
note that adding an icon requires access to all icon resources in the resource fork of 
'panels'.


A summary of the interface predicates for Panels, and where they are located, is listed
below; for more information see the file 'Interfaces':

panel_view              in 'panel view'
panel_open              in 'panel sys'
panel_reopen            in 'panel sys'
panel_rename            in 'panel sys'
panel_create            in 'panel sys'
panel_save              in 'panel sys'
panel_close             in 'panel sys'
panel_menu              in 'panel sys'
ispanel                 in 'panel sys'
panel_id                in 'panel sys'
dispatch_panel_event    in 'panel works'
panel_event             user supplied,default in 'panel works'
panel_list_line_graf    user supplied,default in 'list_class'
panel_definition        built by Panels, placed in user files
panel_item_class        supplied with object class definition,default in 'panel works'
panel_item_graf                                 "
panel_item_grow                                 "
panel_item_hit                                  "
panel_item_new                                  "
panel_item_read                                 "
panel_item_write                                "
panel_scroll_item_info  supplied with object class definition
panelfont               in 'panel works'
panelfontinfo           asserted by 'panels' at initialization
panel_text_size         in 'panel works'
panel_expand_rect       in 'panel works'
panel_target_item       in 'panel works'
voiditem                in 'panel works'
panels_version          in 'panels'
panel_directory         in 'panel uif'
     

/*
   Copyright © Bell-Northern Research Ltd. 1991
*/
